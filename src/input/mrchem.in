#!/usr/bin/env python

#
# MRChem, a numerical real-space code for molecular electronic structure
# calculations within the self-consistent field (SCF) approximations of quantum
# chemistry (Hartree-Fock and Density Functional Theory).
# Copyright (C) 2019 Stig Rune Jensen, Luca Frediani, Peter Wind and contributors.
#
# This file is part of MRChem.
#
# MRChem is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# MRChem is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with MRChem.  If not, see <https://www.gnu.org/licenses/>.
#
# For information on the complete list of contributors to MRChem, see:
# <https://mrchem.readthedocs.io/>
#

import json
import math
import optparse
import os
import re
import subprocess
import sys
import tempfile
from io import StringIO
from shutil import copyfile
from pathlib import Path

# FIXME This will pick up modules when installed
sys.path.append("@CMAKE_INSTALL_PREFIX@/@PYTHON_SITE_INSTALL_DIR@")
sys.path.append('@PROJECT_SOURCE_DIR@/src/chemistry')

from parselglossy.api import parse, validate
from periodictable import PeriodicTable as PT

origin = [0.0, 0.0, 0.0] # global gauge origin in bohrs

def main():
    this_path = Path(__file__).parent

    # Parse command line
    launcher, executable, dryrun, stdout, inp_json, inp_name = parse_cmdline()

    tmpl_file = Path('@PROJECT_SOURCE_DIR@/src/input/template.yml')

    inp_file = Path(inp_name + '.inp')
    out_file = Path(inp_name + '.out')
    json_file = Path(inp_name + '.json')

    # read user input file (JSONDict <- getkw file) or (JSONDict <- json file)
    if inp_json:
        user_dict = validate(infile=inp_file, template=tmpl_file)
    else:
        user_dict = parse(infile=inp_file, template=tmpl_file, grammar='getkw')

    # create necessary directories
    for d in [user_dict["SCF"]["path_checkpoint"],
              user_dict["SCF"]["path_orbitals"],
              user_dict["Response"]["path_checkpoint"],
              user_dict["Response"]["path_orbitals"],
              user_dict["Plotter"]["path"]]:
        if not os.path.exists(d):
            os.mkdir(d)


    # now that all keywords have sensible values,
    # we can translate user input into program input
    program_dict = {}
    program_dict["input"] = translate_input(user_dict)
    program_dict["input"]["printer"]["file_name"] = inp_name

    with open(json_file, 'w') as fd:
        fd.write(json.dumps(program_dict, indent=2))

    print_mpi =  program_dict["input"]["printer"]["print_mpi"]
    print_level =  program_dict["input"]["printer"]["print_level"]
    if stdout or print_mpi or print_level < 0:
        cmd = launcher + ' ' + executable + ' ' + str(json_file)
    else:
        cmd = launcher + ' ' + executable + ' ' + str(json_file) + ' > ' + str(out_file)

    if dryrun:
        print("launch command: " + cmd)
    else:
        subprocess.call(cmd, shell=True)

def parse_cmdline():
    usage = "usage: %prog [options] [config] inp_name"
    version = "@MRCHEM_VERSION@"
    cmdln = optparse.OptionParser(
        usage=usage, version="%prog {0}".format(version))
    cmdln.add_option(
        '--launcher',
        action='store',
        dest='launcher',
        type='string',
        default='',
        help='Set program launcher string')
    cmdln.add_option(
        '-x',
        '--executable',
        action='store',
        dest='executable',
        type='string',
        default='@MRCHEM_EXECUTABLE@',
        help='Set executable name')
    cmdln.add_option(
        '-D',
        '--dryrun',
        action='store_true',
        dest='dryrun',
        default=False,
        help='Only process input')
    cmdln.add_option(
        '--stdout',
        action='store_true',
        dest='stdout',
        default=False,
        help='Print to stdout')
    cmdln.add_option(
        '-j',
        '--json',
        action='store_true',
        dest='inp_json',
        default=False,
        help='Input file is in json format')


    opts, args = cmdln.parse_args()

    launcher = opts.launcher
    executable = opts.executable
    dryrun = opts.dryrun
    stdout = opts.stdout
    inp_json = opts.inp_json

    if (len(args) == 0):
        cmdln.error('No input file passed!')
        sys.exit(1)
    elif (len(args) == 1):
        inp_name = args[0]
    else:
        cmdln.error('Incorrect number of files')
        sys.exit(1)

    return launcher, executable, dryrun, stdout, inp_json, inp_name


def parse_wf_method(user_dict):
    valid_funcs = [
        'svwn3',
        'svwn5',
        'pbe',
        'pbe0',
        'bpw91',
        'bp86',
        'b3p86',
        'b3p86-g',
        'blyp',
        'b3lyp',
        'b3lyp-g',
        'olyp',
        'kt1',
        'kt2',
        'kt3'
    ]

    method_name = ''
    wf_method = user_dict["WaveFunction"]["method"].lower()
    dft_funcs = user_dict["DFT"]["functionals"].lower()
    if wf_method in ['core']:
        method_name = 'Core Hamiltonian'
    elif wf_method in ['hartree']:
        method_name = 'Hartree'
    elif wf_method in ['hf', 'hartree-fock', 'hartreefock']:
        method_name = 'Hartree-Fock'
        wf_method = 'hf'
    elif wf_method in ['dft']:
        method_name = 'DFT'
    elif wf_method in ['lda']:
        method_name = 'DFT (SVWN5)'
        dft_funcs = 'svwn5'
        wf_method = 'dft'
    elif wf_method in valid_funcs:
        method_name = 'DFT (' + wf_method.upper() + ')'
        dft_funcs = wf_method
        wf_method = 'dft'
    else:
        print("Invalid wavefunction method " + user_dict["WaveFunction"]["method"])
        sys.exit(1)

    return method_name, wf_method, dft_funcs


def translate_input(user_dict):
    mol_dict = write_molecule(user_dict);
    mpi_dict = write_mpi(user_dict);
    mra_dict = write_mra(user_dict, mol_dict);
    scf_dict = write_scf_calculation(user_dict, mol_dict);
    rsp_dict = write_rsp_calculations(user_dict, mol_dict);
    program_dict = {
        "mpi": mpi_dict,
        "mra": mra_dict,
        "printer": user_dict["Printer"],
        "molecule": mol_dict,
        "scf_calculation": scf_dict,
        "rsp_calculations": rsp_dict
    }
    return program_dict


def write_mpi(user_dict):
    mpi_dict = {
        "numerically_exact": user_dict["MPI"]["numerically_exact"],
        "shared_memory_size": user_dict["MPI"]["shared_memory_size"],
        "bank_size": user_dict["MPI"]["bank_size"]
    }
    return mpi_dict


def write_mra(user_dict, mol_dict):
    order = user_dict["Basis"]["order"]
    if order < 0:
        # Set polynomial order based on world_prec
        prec = user_dict["world_prec"]
        order = int(math.ceil(-1.5 * math.log10(prec)))

    min_scale = -(user_dict["world_size"] - 1)
    if min_scale > 1:
        # Compute auto box
        max_coord = 0.0 # single (coord + Z) with largest abs value
        for coord in mol_dict["coords"]:
            Z_i = max(5.0, float(PT[coord["atom"]].Z))
            max_coord = max(max_coord, abs(max(coord["xyz"], key=abs)) + 2.0*Z_i)

        min_scale = 0
        while 2.0**(-min_scale) < max_coord:
            min_scale = min_scale - 1
    else:
        # Approximately scale world angstrom -> bohr
        if user_dict["world_unit"] == "angstrom":
            min_scale -= 1

    max_scale = 20
    if (max_scale - min_scale) > 30:
        max_scale = 30 + min_scale

    mra_dict = {
        "basis_type": user_dict["Basis"]["type"].lower(),
        "basis_order": order,
        "boxes": [2, 2, 2],
        "corner": [-1, -1, -1],
        "min_scale": min_scale,
        "max_scale": max_scale
    }
    return mra_dict

def write_printer(user_dict):
    return user_dict["Printer"]


############################################################
#                         MOLECULE                         #
############################################################

def write_molecule(user_dict):
    # Translate into program syntax
    coords_raw = user_dict["Molecule"]["coords"]
    coords_dict = []
    for line in coords_raw.split('\n'):
        sp = line.split()
        if len(sp) > 0:
            atom = sp[0].lower()
            xyz = list(map(float, sp[1:]))
            if len(xyz) != 3:
                print("Invalid coordinate: " + atom.upper() + " " + str(xyz))
                sys.exit(1)
            coords_dict.append({
                "atom": atom,
                "xyz": xyz
            })

    # Convert angstrom -> bohr
    global origin
    origin = user_dict["world_origin"]
    if user_dict["world_unit"] == "angstrom":
        AA = 1.889725989 # Angstrom unit conversion
        origin = [AA * r for r in origin]
        for coord in coords_dict:
            coord["xyz"] = [AA * r for r in coord["xyz"]]

    # Check for singularity
    for a in range(len(coords_dict)):
        for b in range(a + 1, len(coords_dict)):
            A = coords_dict[a]
            B = coords_dict[b]
            R = math.sqrt(sum([(a - b)**2 for a,b in zip(A["xyz"], B["xyz"])]))
            if R < 1.0e-6:
                print("ABORT: Atoms are too close")
                print(" " + A["atom"] + " : " + str(A["xyz"]))
                print(" " + B["atom"] + " : " + str(B["xyz"]))
                sys.exit(1)
            elif R < 1.0e-3:
                print("WARNING: Atoms are very close")
                print(" " + A["atom"] + " : " + str(A["xyz"]))
                print(" " + B["atom"] + " : " + str(B["xyz"]))

    # Translate center of mass to origin
    if user_dict["Molecule"]["translate"]:
        # Calc center of mass
        M = 0.0
        CoM = [0.0, 0.0, 0.0]
        for coord in coords_dict:
            m = PT[coord["atom"]].mass
            M += m
            CoM = [m*r + o for r,o in zip(coord["xyz"], CoM)]
        CoM = [x/M - o for x,o in zip(CoM, origin)]

        # Translate coords
        for coord in coords_dict:
            coord["xyz"] = [r - o for r,o in zip(coord["xyz"], CoM)]

    mol_dict = {
        "multiplicity": user_dict["Molecule"]["multiplicity"],
        "charge": user_dict["Molecule"]["charge"],
        "coords": coords_dict
    }
    return mol_dict


############################################################
#                       SCF CALCULATION                    #
############################################################

def write_scf_calculation(user_dict, mol_dict):
    method_name, wf_method, dft_funcs = parse_wf_method(user_dict)

    scf_dict = {}
    scf_dict["fock_operator"] = write_scf_fock(user_dict, mol_dict, wf_method, dft_funcs)
    scf_dict["initial_guess"] = write_scf_guess(user_dict, method_name)

    path_orbitals = user_dict["SCF"]["path_orbitals"]
    if user_dict["SCF"]["write_orbitals"]:
        scf_dict["write_orbitals"] = {
            "file_phi_p": path_orbitals + "/phi_p_scf",
            "file_phi_a": path_orbitals + "/phi_a_scf",
            "file_phi_b": path_orbitals + "/phi_b_scf"
        }

    if user_dict["SCF"]["run"]:
        scf_dict["scf_solver"] = write_scf_solver(user_dict, method_name)

    prop_dict = write_scf_properties(user_dict)
    if len(prop_dict) > 0:
        scf_dict["properties"] = prop_dict

    plot_dict = write_scf_plot(user_dict)
    if len(plot_dict) > 0:
        scf_dict["plots"] = plot_dict

    return scf_dict


def write_scf_fock(user_dict, mol_dict, wf_method, dft_funcs):
    fock_dict = {}

    # Kinetic
    fock_dict["kinetic_operator"] = {
        "derivative": user_dict["Derivatives"]["kinetic"]
    }

    # Nuclear
    fock_dict["nuclear_operator"] = {
        "proj_prec": user_dict["Precisions"]["nuclear_prec"],
        "smooth_prec": user_dict["Precisions"]["nuclear_prec"],
        "shared_memory": user_dict["MPI"]["share_nuclear_potential"]
    }

    # Coulomb
    if wf_method in ['hartree', 'hf', 'dft']:
        fock_dict["coulomb_operator"] = {
            "poisson_prec": user_dict["Precisions"]["poisson_prec"],
            "shared_memory": user_dict["MPI"]["share_coulomb_potential"]
        }

    # Exchange
    if wf_method in ['hf', 'dft']:
        fock_dict["exchange_operator"] = {
            "screen": False,
            "exchange_prec": user_dict["Precisions"]["exchange_prec"],
            "poisson_prec": user_dict["Precisions"]["poisson_prec"]
        }

    # Exchange-Correlation
    if wf_method in ['dft']:
        func_dict = []
        for line in dft_funcs.split('\n'):
            sp = line.split()
            if len(sp) > 0:
                func = sp[0].lower()
                coef = [1.0]
                if len(sp) > 1:
                    coef = list(map(float, sp[1:]))
                func_dict.append({
                    "name": func,
                    "coef": coef[0]
                })
        fock_dict["xc_operator"] = {
            "shared_memory": user_dict["MPI"]["share_xc_potential"],
            "xc_functional": {
                "spin": user_dict["DFT"]["spin"],
                "cutoff": user_dict["DFT"]["density_cutoff"],
                "functionals": func_dict
            }
        }

    # External electric field
    if len(user_dict["ExternalFields"]["electric_field"]) > 0:
        fock_dict["external_operator"] = {
            "electric_field": user_dict["ExternalFields"]["electric_field"],
            "r_O": origin
        }

    return fock_dict


def write_scf_guess(user_dict, method_name):
    guess_str = user_dict["SCF"]["guess_type"].lower()
    guess_type = guess_str.split('_')[0]
    zeta = 0
    if guess_type == 'sad' or guess_type == 'core':
        zeta_str = guess_str.split('_')[1]
        if zeta_str == 'sz':
            zeta = 1
        elif zeta_str == 'dz':
            zeta = 2
        elif zeta_str == 'tz':
            zeta = 3
        elif zeta_str == 'qz':
            zeta = 4
        else:
            print("Invalid zeta:" + guess_suffix)

    scf_dict = user_dict["SCF"]
    file_dict = user_dict["Files"]
    guess_dict = {
        "prec": scf_dict["guess_prec"],
        "zeta": zeta,
        "type": guess_type,
        "method": method_name,
        "localize": scf_dict["localize"],
        "restricted": user_dict["WaveFunction"]["restricted"],
        "file_chk": scf_dict["path_checkpoint"] + "/phi_scf",
        "file_basis": file_dict["guess_basis"],
        "file_gto_p": file_dict["guess_gto_p"],
        "file_gto_a": file_dict["guess_gto_a"],
        "file_gto_b": file_dict["guess_gto_b"],
        "file_phi_p": file_dict["guess_phi_p"] + "_scf",
        "file_phi_a": file_dict["guess_phi_a"] + "_scf",
        "file_phi_b": file_dict["guess_phi_b"] + "_scf"
    }
    return guess_dict


def write_scf_solver(user_dict, method_name):
    # SCF precisions and thresholds
    start_prec = user_dict["SCF"]["start_prec"]
    final_prec = user_dict["SCF"]["final_prec"]
    if final_prec < 0.0:
        final_prec = user_dict["world_prec"]
    if start_prec < 0.0:
        start_prec = final_prec

    scf_dict = user_dict["SCF"]
    solver_dict = {
        "method": method_name,
        "kain": scf_dict["kain"],
        "max_iter": scf_dict["max_iter"],
        "rotation": scf_dict["rotation"],
        "localize": scf_dict["localize"],
        "file_chk": scf_dict["path_checkpoint"] + "/phi_scf",
        "checkpoint": scf_dict["write_checkpoint"],
        "start_prec": start_prec,
        "final_prec": final_prec,
        "energy_thrs": scf_dict["energy_thrs"],
        "orbital_thrs": scf_dict["orbital_thrs"],
        "helmholtz_prec": user_dict["Precisions"]["helmholtz_prec"]
    }
    return solver_dict


def write_scf_properties(user_dict):
    prop_dict = {}
    if user_dict["Properties"]["dipole_moment"]:
        prop_dict["dipole_moment"] = {}
        prop_dict["dipole_moment"]['dip-1'] = {
            "operator": "h_e_dip",
            "precision": user_dict["world_prec"],
            "r_O": origin
        }
    if user_dict["Properties"]["quadrupole_moment"]:
        prop_dict["quadrupole_moment"] = {}
        prop_dict["quadrupole_moment"]['quad-1'] = {
            "operator": "h_e_quad",
            "precision": user_dict["world_prec"],
            "r_O": origin
        }
    return prop_dict


def write_scf_plot(user_dict):
    plot_dict = {}
    if user_dict["Properties"]["plot_density"] or len(user_dict["Properties"]["plot_orbitals"]):
        plot_dict["orbitals"] = user_dict["Properties"]["plot_orbitals"]
        plot_dict["density"] = user_dict["Properties"]["plot_density"]
        plot_dict["plotter"] = user_dict["Plotter"]
        if user_dict["world_unit"] == "angstrom":
            AA = 1.889725989 # Angstrom unit conversion
            plot_dict["plotter"]["O"] = [AA * r for r in plot_dict["plotter"]["O"]]
            plot_dict["plotter"]["A"] = [AA * r for r in plot_dict["plotter"]["A"]]
            plot_dict["plotter"]["B"] = [AA * r for r in plot_dict["plotter"]["B"]]
            plot_dict["plotter"]["C"] = [AA * r for r in plot_dict["plotter"]["C"]]
    return plot_dict


############################################################
#                   RESPONSE CALCULATIONS                  #
############################################################

def write_rsp_calculations(user_dict, mol_dict):
    rsp_dict = {}
    run_pol = user_dict["Properties"]["polarizability"]
    run_mag = user_dict["Properties"]["magnetizability"]
    run_nmr = user_dict["Properties"]["nmr_shielding"]
    nuc_spec = user_dict["NMRShielding"]["nuclear_specific"]

    if run_pol:
        for omega in user_dict["Polarizability"]["frequency"]:
            freq_key = f'{omega:6f}'
            pol_key = 'pol-' + freq_key
            rsp_calc = write_rsp_calc(omega, user_dict, mol_dict)
            rsp_calc["perturbation"] = {
                "operator": "h_e_dip",
                "r_O": origin
            }
            rsp_calc["properties"] = {}
            rsp_calc["properties"]["polarizability"] = {}
            rsp_calc["properties"]["polarizability"][pol_key] = {
                "frequency": omega,
                "precision": user_dict["world_prec"],
                "operator": "h_e_dip",
                "r_O": origin
            }
            rsp_key = "ext_el-" + freq_key
            rsp_dict[rsp_key] = rsp_calc

    if run_mag or (run_nmr and not nuc_spec):
        omega = 0.0 # only static magnetic response
        freq_key = f'{omega:6f}'
        mag_key = 'mag-' + freq_key
        rsp_calc = write_rsp_calc(0.0, user_dict, mol_dict)
        rsp_calc["perturbation"] = {
            "operator": "h_b_dip",
            "derivative": user_dict["Derivatives"]["h_b_dip"],
            "r_O": origin
        }
        rsp_calc["properties"] = {}
        if run_mag:
            rsp_calc["properties"]["magnetizability"] = {}
            rsp_calc["properties"]["magnetizability"][mag_key] = {
                "frequency": omega,
                "precision": user_dict["world_prec"],
                "dia_operator": "h_bb_dia",
                "para_operator": "h_b_dip",
                "derivative": user_dict["Derivatives"]["h_b_dip"],
                "r_O": origin
            }
        if (run_nmr and not nuc_spec):
            rsp_calc["properties"]["nmr_shielding"] = {}
            nuc_vec = user_dict["NMRShielding"]["nucleus_k"]
            all_nucs = (nuc_vec[0] < 0)
            nuclei = mol_dict["coords"]
            for k in range(len(nuclei)):
                if all_nucs or k in nuc_vec:
                    atom_key = str(k) + nuclei[k]["atom"]
                    nmr_key = 'nmr-' + atom_key
                    rsp_calc["properties"]["nmr_shielding"][nmr_key] = {
                        "precision": user_dict["world_prec"],
                        "dia_operator": "h_bm_dia",
                        "para_operator": "h_m_pso",
                        "smoothing": user_dict["world_prec"],
                        "derivative": user_dict["Derivatives"]["h_m_pso"],
                        "r_O": origin,
                        "r_K": nuclei[k]["xyz"]
                    }
        rsp_key = "ext_mag-" + freq_key
        rsp_dict[rsp_key] = rsp_calc

    if run_nmr and nuc_spec:
        nuc_vec = user_dict["NMRShielding"]["nucleus_k"]
        all_nucs = (nuc_vec[0] < 0)
        nuclei = mol_dict["coords"]
        for k in range(len(nuclei)):
            if (all_nucs) or (k in nuc_vec):
                atom_key = str(k) + nuclei[k]["atom"]
                nmr_key = 'nmr-' + atom_key
                rsp_calc = write_rsp_calc(0.0, user_dict, mol_dict)
                rsp_calc["perturbation"] = {
                    "operator": "h_m_pso",
                    "smoothing": user_dict["world_prec"],
                    "derivative": user_dict["Derivatives"]["h_m_pso"],
                    "r_K": nuclei[k]["xyz"]
                }
                rsp_calc["properties"] = {}
                rsp_calc["properties"]["nmr_shielding"] = {}
                rsp_calc["properties"]["nmr_shielding"][nmr_key] = {
                    "precision": user_dict["world_prec"],
                    "dia_operator": "h_bm_dia",
                    "para_operator": "h_b_dip",
                    "smoothing": user_dict["world_prec"],
                    "derivative": user_dict["Derivatives"]["h_b_dip"],
                    "r_O": origin,
                    "r_K": nuclei[k]["xyz"]
                }
                rsp_key = "nuc_mag-" + atom_key
                rsp_dict[rsp_key] = rsp_calc

    return rsp_dict


def write_rsp_calc(omega, user_dict, mol_dict):
    method_name, wf_method, dft_funcs = parse_wf_method(user_dict)

    rsp_dict = user_dict["Response"]
    file_dict = user_dict["Files"]

    rsp_calc = {}
    rsp_calc["frequency"] = omega
    rsp_calc["dynamic"] = (omega > 1.0e-12)
    rsp_calc["fock_operator"] = write_rsp_fock(user_dict, mol_dict, wf_method, dft_funcs)
    rsp_calc["unperturbed"] = {
        "precision": user_dict["world_prec"],
        "localize": rsp_dict["localize"],
        "fock_operator": write_scf_fock(user_dict, mol_dict, wf_method, dft_funcs)
    }

    rsp_calc["components"] = []
    for d in [0, 1, 2]:
        rsp_comp = {}
        rsp_comp["initial_guess"] = {
            "type": rsp_dict["guess_type"].lower(),
            "precision": rsp_dict["guess_prec"],
            "file_chk_x": rsp_dict["path_checkpoint"] + "/X_rsp_" + str(d),
            "file_chk_y": rsp_dict["path_checkpoint"] + "/Y_rsp_" + str(d),
            "file_x_p": file_dict["guess_x_p"] + "_rsp_" + str(d),
            "file_x_a": file_dict["guess_x_a"] + "_rsp_" + str(d),
            "file_x_b": file_dict["guess_x_b"] + "_rsp_" + str(d),
            "file_y_p": file_dict["guess_y_p"] + "_rsp_" + str(d),
            "file_y_a": file_dict["guess_y_a"] + "_rsp_" + str(d),
            "file_y_b": file_dict["guess_y_b"] + "_rsp_" + str(d)
        }
        if rsp_dict["write_orbitals"]:
            path_orbitals = rsp_dict["path_orbitals"]
            rsp_comp["write_orbitals"] = {
                "file_x_p": path_orbitals + "/X_p_rsp_" + str(d),
                "file_x_a": path_orbitals + "/X_a_rsp_" + str(d),
                "file_x_b": path_orbitals + "/X_b_rsp_" + str(d),
                "file_y_p": path_orbitals + "/Y_p_rsp_" + str(d),
                "file_y_a": path_orbitals + "/Y_a_rsp_" + str(d),
                "file_y_b": path_orbitals + "/Y_b_rsp_" + str(d)
            }
        if rsp_dict["run"][d]:
            rsp_comp["rsp_solver"] = write_rsp_solver(user_dict, method_name, d)
        rsp_calc["components"].append(rsp_comp)
    return rsp_calc


def write_rsp_fock(user_dict, mol_dict, wf_method, dft_funcs):
    fock_dict = {}

    # Coulomb
    if wf_method in ['hartree', 'hf', 'dft']:
        fock_dict["coulomb_operator"] = {
            "poisson_prec": user_dict["Precisions"]["poisson_prec"],
            "shared_memory": user_dict["MPI"]["share_coulomb_potential"]
        }

    # Exchange
    if wf_method in ['hf', 'dft']:
        fock_dict["exchange_operator"] = {
            "screen": False,
            "exchange_prec": user_dict["Precisions"]["exchange_prec"],
            "poisson_prec": user_dict["Precisions"]["poisson_prec"]
        }

    # Exchange-Correlation
    if wf_method in ['dft']:
        func_dict = []
        for line in dft_funcs.split('\n'):
            sp = line.split()
            if len(sp) > 0:
                func = sp[0].lower()
                coef = [1.0]
                if len(sp) > 1:
                    coef = list(map(float, sp[1:]))
                func_dict.append({
                    "name": func,
                    "coef": coef[0]
                })
        fock_dict["xc_operator"] = {
            "shared_memory": user_dict["MPI"]["share_xc_potential"],
            "xc_functional": {
                "spin": user_dict["DFT"]["spin"],
                "cutoff": user_dict["DFT"]["density_cutoff"],
                "functionals": func_dict
            }
        }

    return fock_dict


def write_rsp_solver(user_dict, method_name, d):
    # Response precisions and thresholds
    start_prec = user_dict["Response"]["start_prec"]
    final_prec = user_dict["Response"]["final_prec"]
    if final_prec < 0.0:
        final_prec = user_dict["world_prec"]
    if start_prec < 0.0:
        start_prec = final_prec

    rsp_dict = user_dict["Response"]
    solver_dict = {
        "method": method_name,
        "kain": rsp_dict["kain"],
        "max_iter": rsp_dict["max_iter"],
        "file_chk_x": rsp_dict["path_checkpoint"] + "/X_rsp_" + str(d),
        "file_chk_y": rsp_dict["path_checkpoint"] + "/Y_rsp_" + str(d),
        "checkpoint": rsp_dict["write_checkpoint"],
        "start_prec": start_prec,
        "final_prec": final_prec,
        "orbital_thrs": user_dict["Response"]["orbital_thrs"],
        "property_thrs": user_dict["Response"]["property_thrs"],
        "helmholtz_prec": user_dict["Precisions"]["helmholtz_prec"],
        "orth_prec": 1.0e-14
    }
    return solver_dict


if __name__ == '__main__':
    main()
